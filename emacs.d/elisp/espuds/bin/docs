#!/usr/bin/env emacs --script

(require 's)
(require 'dash)

(defvar root-path
  (expand-file-name ".." (expand-file-name ".." load-file-name)))

(add-to-list 'load-path root-path)

(defvar files
  (mapcar
   (lambda (file)
     (expand-file-name file root-path))
   (list
    "espuds-buffer.el"
    "espuds-input.el"
    "espuds-misc.el"
    "espuds-cursor.el"
    "espuds-region.el"
    "espuds-text.el")))

(defvar docs (make-hash-table))

(defalias 'Given 'define-docs)
(defalias 'When 'define-docs)
(defalias 'Then 'define-docs)
(defalias 'And 'define-docs)
(defalias 'But 'define-docs)

(defun define-docs (pattern &rest args)
  (let ((doc (car args)))
    (puthash pattern doc docs)))

(mapc
 (lambda (file)
   (load file t t))
 files)

(let ((output))
  (maphash
   (lambda (pattern doc)
     (let* ((lines (s-split "\n" doc))
            (header (car lines))
            (description
             (mapconcat
              (lambda (line)
                (s-concat "    " line))
              (-remove 's-blank? (cdr lines))
              "\n")))
       (add-to-list
        'output
        (s-concat
         "### " header "\n\n" "Pattern:" "\n\n" "    " pattern "\n\n" "Docs:" "\n\n" description "\n"))))
   docs)

  (let ((template-file (expand-file-name "README.template" root-path))
        (readme-file (expand-file-name "README.markdown" root-path)))
    (with-temp-buffer
      (insert-file-contents-literally template-file)
      (let ((content
             (s-replace "STEP-DEFINITION-DOCS" (mapconcat 'identity output "\n") (buffer-string))))
        (erase-buffer)
        (insert content)
        (write-file readme-file)))))
