#+TITLE: Emacs configuration file
#+AUTHOR: Arthur Léothaud
#+EMAIL: arthur@leothaud.eu

#+STARTUP: showall

#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+LANGUAGE: en

#+LINK_HOME: http://leothaud.eu
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="emacs.css" />

* Installation & loading
  Start by “disabling” garbage collection while starting up:
  #+BEGIN_SRC emacs-lisp
    ;; Use a hook so the message doesn't get clobbered by other messages.
    (add-hook 'emacs-startup-hook
              (lambda ()
                (message "Emacs ready in %s with %d garbage collections."
                         (format "%.2f seconds"
                                 (float-time
                                  (time-subtract after-init-time before-init-time)))
                         gcs-done)))

    (setq gc-cons-threshold most-positive-fixnum)
    (add-hook 'after-init-hook #'(lambda ()
                                   ;; restore after startup (and don't be so stingy
                                   ;; on the memory, we have lots now. It's the
                                   ;; distant future)
                                   (setq gc-cons-threshold 20000000)))
  #+END_SRC

  I use [[https://github.com/jwiegley/use-package][use-package]] and [[https://melpa.org/][melpa]] to manage my packages and modules.
  #+BEGIN_SRC emacs-lisp
    ;; package-style dependencies
    (eval-when-compile
      (require 'package)
      (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
      (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))
      (require 'use-package)
      (setq use-package-always-ensure t
            use-package-verbose t))

    (use-package dim) ;; to change mode display in mode line

    (use-package use-package-chords
      :config (key-chord-mode 1))
  #+END_SRC

  Let’s use [[https://github.com/Malabarba/paradox][paradox]] to manage packages in a fancier way:
  #+BEGIN_SRC emacs-lisp
    (use-package paradox)
  #+END_SRC


  Let’s keep ~/.emacs.d tidy:
  #+BEGIN_SRC emacs-lisp
    (use-package no-littering
      :config
      (require 'recentf)
      (add-to-list 'recentf-exclude no-littering-var-directory)
      (add-to-list 'recentf-exclude no-littering-etc-directory))
  #+END_SRC

  Try packages without installing them:
  #+BEGIN_SRC emacs-lisp
    (use-package try)
  #+END_SRC

* Private variables
  All private information is stored in variables in =~/.emacs.d/private.el
  #+BEGIN_SRC emacs-lisp
    (let ((private-file (expand-file-name "private.el" user-emacs-directory)))
      (when (file-exists-p private-file)
        (load-file private-file)))
  #+END_SRC

* Customisation
  Custom file should be loaded early.
  #+BEGIN_SRC emacs-lisp
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
    (when (file-exists-p custom-file)
      (load custom-file))
  #+END_SRC

* Libraries & tools
  My custom (often stolen) lisp code is stored in elisp/my-functions.el.
  #+BEGIN_SRC emacs-lisp
    (use-package my-functions ;; custom functions
      :ensure nil
      :commands (ale/insert-ticket-prefix ale/jirify ale/find-init-file ale/open-project ale/apply-local-theme-modern)
      :load-path "elisp/"
      :bind
      ("C-c i" . ale/indent-region-or-buffer) ;; indent whole buffer
      ("<C-M-down>" . duplicate-current-line)
      ("<f5>" . ale/revert-buffer-no-confirm) ;; re-read file from disk
      ("C-<f5>" . ale/copy-and-show-current-file-path) ;; copy current file path
      ("M-<f5>" . show-file-name) ;; show the file name in minibuffer
      ("C-x C-r" . sudo-edit) ;; sudo open file
      ("C-x |" . ale/toggle-window-split)
      ("C-|" . ale/toggle-window-split))

    (use-package validate)

    (use-package my-checks :ensure nil)

    (use-package describe-number)
  #+END_SRC

* Theme
  Apply a colour theme (uses the variable my-private-theme if defined)
  #+BEGIN_SRC emacs-lisp
    (use-package color-theme-modern
      :demand
      :init
      (add-to-list 'custom-theme-load-path
                   (file-name-as-directory (expand-file-name "themes" user-emacs-directory)))
      :config
      (ale/apply-local-theme-modern))
  #+END_SRC

* Defaults, ergonomics & keybindings
  I use [[https://github.com/abo-abo/hydra][hydra]] in order to map ranges of shortcuts:
  #+BEGIN_SRC emacs-lisp
    (use-package hydra)
  #+END_SRC

  [[https://github.com/justbur/emacs-which-key][which-key]] displays all available bindings for the prefix that has just been typed.
  #+BEGIN_SRC emacs-lisp
    (use-package which-key ;; which-key (replacement for guide-key)
      :config
      (which-key-mode)
      (dim-minor-name 'which-key-mode nil)
      (setq which-key-idle-delay 0.3))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package helpful)
  #+END_SRC
  Let’s redefine some basic behaviour and shortcuts:
  #+BEGIN_SRC emacs-lisp
    (use-package better-defaults)

    (use-package crux
      :defer 1
      :config
      (global-set-key [remap kill-whole-line] #'crux-kill-whole-line)
      (crux-reopen-as-root-mode)
      ;; advices
      (crux-with-region-or-buffer comment-or-uncomment-region)
      (crux-with-region-or-buffer indent-region)
      (crux-with-region-or-buffer untabify)
      (crux-with-region-or-buffer tabify))
  #+END_SRC

  Easier eclipse-style bookmark setting:
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-S-b") 'helm-bookmarks)
    (global-set-key (kbd "<f8>") 'helm-bookmarks)
  #+END_SRC

  ~M-«~ and ~M-»~ are easier than ~M-<~ and ~M->~ with a BÉPO™ keyboard:
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-«") 'beginning-of-buffer)
    (global-set-key (kbd "M-»") 'end-of-buffer)
  #+END_SRC

  Killing emacs; default binding is too easy to hit by accident.
  #+BEGIN_SRC emacs-lisp
    ;; Killing emacs
    (global-unset-key (kbd "C-x C-c")) ;;
    (global-set-key (kbd "C-x r q") 'kill-emacs) ;; r·eally q·uit
  #+END_SRC

  I never use the minimise command, use the binding for repeat instead.
  #+BEGIN_SRC emacs-lisp
    ;; repeat
    (global-set-key (kbd "C-z") 'repeat)
    (global-set-key (kbd "C-x C-z") 'repeat-complex-command)

    ;; Answer questions with y/n
    (defalias 'yes-or-no-p 'y-or-n-p)

    ;; Real emacs knights don't use shift to mark things
    (setq shift-select-mode nil)

    ;; Transparently open compressed files
    (auto-compression-mode t)

    ;; UTF-8 everywhere
    (prefer-coding-system       'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8)

    ;; Lines should be 80 characters wide, not 70
    (setq-default fill-column 80)

    ;; fill or unfill paragraph (M-q as a toggle)
    (defun endless/fill-or-unfill ()
      "Like `fill-paragraph', but unfill if used twice."
      (interactive)
      (let ((fill-column
             (if (eq last-command 'endless/fill-or-unfill)
                 (progn (setq this-command nil)
                        (point-max))
               fill-column)))
        (call-interactively #'fill-paragraph)))
    (global-set-key [remap fill-paragraph]
                    #'endless/fill-or-unfill)

    (setq global-mark-ring-max 128
          mark-ring-max 128
          kill-ring-max 128)

    ;; use count-words instead of count-words-region as it works on buffer
    ;; if no region is selected
    (global-set-key (kbd "M-=") 'count-words)

    ;; enable commands disabled by default
    (put 'downcase-region 'disabled nil)
    (put 'upcase-region 'disabled nil)
    (put 'narrow-to-region 'disabled nil)
    (put 'narrow-to-page 'disabled nil)
    (put 'set-goal-column 'disabled nil)
    (put 'scroll-left 'disabled nil)

    ;; ido-mode by default
    (ido-mode)
  #+END_SRC

  I use [[https://github.com/chrisdone/god-mode][god-mode]] to implement a pseudo-modal behaviour. The cursor and the mode-line become red when in god-mode to make it more visible.
  #+BEGIN_SRC emacs-lisp
    (use-package god-mode
      :init (setq god-local-mode nil)
      :bind
      (("C-c g" . toggle-god-mode)
       :map god-local-mode-map
       ("z" . repeat)
       ("." . repeat))
      :chords ("ii" . toggle-god-mode)
      :config
      (dim-minor-name 'god-local-mode (concat " " (icons-in-terminal 'linea_weather_cloud_lightning :weight "bold" :foreground "red")))
      (defun toggle-god-mode ()
        (interactive)
        (progn
          (god-mode-all)
          (my-update-cursor)))
      (setq god-mode-colors nil)
      (defun my-update-cursor ()
        "change cursor colour if god-mode is activated/deactivated effectively."
        (cond
         ((and god-local-mode (not god-mode-colors))
          (progn
            (set-cursor-color "red")
            (setq god-mode-colors t)))
         ((not god-local-mode)
          (progn
            (set-cursor-color "yellow")
            (setq god-mode-colors nil)))))

      (defadvice select-window (after update-cursor-color activate)
        (my-update-cursor))
      (add-to-list 'god-exempt-major-modes 'helm-major-mode)
      (add-to-list 'god-exempt-major-modes 'browse-kill-ring-mode)
      (add-to-list 'god-exempt-major-modes 'ibuffer-mode))
  #+END_SRC

* Searching
  #+BEGIN_SRC emacs-lisp
    (defhydra hydra-search(:color teal :hint nil)
      "
      ^Search^     ^Toggle^
      ^──────^─────^──────^────────────
      _q_ quit     _s_ search forward
      ^ ^          _r_ search backward
      ^ ^          _Q_ vr/query-replace
      ^ ^          _w_ helm-swoop
      "

      ("s" isearch-forward)
      ("r" isearch-backward)
      ("Q" vr/query-replace)
      ("w" helm-swoop)
      ("q" nil))
    (global-set-key (kbd "C-é") 'hydra-search/body)
  #+END_SRC
* Appearance
** Decorations
*** Zoom
    I use [[https://github.com/purcell/default-text-scale][default-text-scale]] to zoom in and out the whole emacs frame.
    #+BEGIN_SRC emacs-lisp
      (use-package default-text-scale
        :bind
        ("C-+" . default-text-scale-increase)
        ("C-=" . default-text-scale-decrease))
    #+END_SRC

*** Zen
    #+BEGIN_SRC emacs-lisp
      (use-package sublimity
        :defer t
        :config
        (require 'sublimity-scroll)
        (require 'sublimity-map))
    #+END_SRC

*** Highlight feedback
    Let’s have a visual feedback when performing cut/copy/paste operations.
    #+BEGIN_SRC emacs-lisp
      (use-package volatile-highlights
        :defer t
        :config (dim-minor-name 'volatile-highlights-mode nil))

      (use-package idle-highlight-mode :defer t)
    #+END_SRC

    Highlight current line in list buffers:
    #+BEGIN_SRC emacs-lisp
      (use-package highlight-line
        :ensure nil
        :config
        (global-hl-line-mode -1) ;; don’t highlight current line
        (highlight-line-mode 1) ;; except in “list” modes
        :load-path "elisp/")

      (use-package fancy-narrow
        :defer t
        :config
        (dim-minor-name 'fancy-narrow-mode nil)
        (fancy-narrow-mode t))

      (use-package highlight-indent-guides
        :config (setq highlight-indent-guides-method 'character)
        :hook (prog-mode . highlight-indent-guides-mode))
    #+END_SRC

*** More
    Let’s have an indicator in the mode-line for search results:
    #+BEGIN_SRC emacs-lisp
      (use-package anzu
        :config
        (dim-minor-name 'anzu-mode nil)
        (global-anzu-mode t)
        (setq-default anzu-cons-mode-line-p t))
    #+END_SRC

    More visual customisation…

*** Icons in terminal:
    #+BEGIN_SRC emacs-lisp
      (use-package font-lock+
        :ensure nil
        :load-path "elisp")

      (use-package icons-in-terminal
        :ensure nil
        :load-path "~/.local/share/icons-in-terminal/")
      ;; (insert (icons-in-terminal 'oct_flame)) ; C-h f icons-in-terminal[RET] for more info
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      ;; colors, appearance
      (use-package iso-transl ;; some environments don’t handle dead keys
        :ensure nil)

      (global-font-lock-mode t) ;; enable syntax highlighting
      (blink-cursor-mode -1) ;; no blinking cursor
      (fringe-mode 0) ;; remove fringes on the sides

      ;; don’t display linum except while goto-line
      (global-set-key [remap goto-line] 'goto-line-with-feedback)

      ;; Show me empty lines after buffer end
      (set-default 'indicate-empty-lines t)

      (setq-default
       transient-mark-mode t ;; Show active region
       truncate-lines t ;; Don't soft-break lines for me, please
       truncate-string-ellipsis "…")

      (setq
       font-lock-maximum-decoration t ;; all possible colours
       inhibit-startup-screen t ;; No splash screen
       echo-keystrokes 0.1 ;; Show keystrokes in progress
       initial-scratch-message nil ;; No *scratch* message
       visible-bell nil ;; No flashing!
       line-number-mode t ;; Always display line and column numbers
       column-number-mode t)

      ;; prettify-symbols
      (defconst lisp--prettify-symbols-alist
        '(("lambda"  . λ)
          ("!=" . ≠)
          ("..." . …)))
    #+END_SRC

** Colours
   Colour parentheses according to nesting level:
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :hook (prog-mode . rainbow-delimiters-mode))
   #+END_SRC

   In some specific modes, I like to have the syntax highlighting replaced by a colouring according to nesting level.
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-blocks :defer t)
   #+END_SRC

   When coding, colour codes and names should be displayed in the this colour.
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :config (dim-minor-name 'rainbow-mode nil)
       :hook (prog-mode . rainbow-mode))
   #+END_SRC
   Note: If I ever need to work seriously with colours: [[https://github.com/emacsfodder/kurecolor][kurecolor]]

* Dired
  I use dired+ which gives a colourful way of displaying information (ls -lA way).
  #+BEGIN_SRC emacs-lisp
    (use-package dired
      :ensure nil
      :init
      (unbind-key "M-b" dired-mode-map)
      :config
      (put 'dired-find-alternate-file 'disabled nil)
      (setq dired-dwim-target t
            ;; dired human readable size format
            dired-listing-switches "-AlhF"
            auto-revert-verbose nil
            ;; always delete and copy recursively
            dired-recursive-deletes 'always
            dired-recursive-copies 'always))

    (use-package dired+
      :ensure nil
      :load-path "elisp/dired+.el")

    (use-package dired-narrow
      :bind (:map dired-mode-map ("/" . dired-narrow)))

    (use-package find-dired
      :config (setq find-ls-option '("-print0 | xargs -0 ls -ld" . "-ld")))

    (use-package dired-collapse
      :hook (dired-mode . (lambda () (dired-collapse-mode t))))

    (use-package dired-subtree)
  #+END_SRC

  Package to try:
  #+BEGIN_SRC emacs-lisp
    (use-package phi-search
      :disabled
      :bind
      ("C-s" . phi-search)
      ("C-r" . phi-search-backward))
  #+END_SRC

  Standard isearch by default:
  #+BEGIN_SRC emacs-lisp
    (use-package isearch
      :ensure nil
      :config (dim-minor-name 'isearch-mode (concat " " (icons-in-terminal 'linea_basic_magnifier :foreground "pink" :height 1.4))))

    (use-package isearch-dabbrev
      :bind (:map isearch-mode-map
                  ("<tab>" . isearch-dabbrev-expand)
                  ("M-/" . isearch-dabbrev-expand)))

    (use-package smartscan
      :bind
      ("M-n". smartscan-symbol-go-forward) ;; find next occurence of word at point
      ("M-p". smartscan-symbol-go-backward) ;; find previous occurence of word at point
      ("M-'". smartscan-symbol-replace)) ;; replace all occurences of word at point
  #+END_SRC

* Regular expressions
  #+BEGIN_SRC emacs-lisp
    ;; regexp-builder
    (use-package re-builder
      :config (setq reb-re-syntax 'string)) ;; syntax used in the re-buidler

    (use-package visual-regexp-steroids
      :bind
      (("M-s r" . vr/replace)
       ("M-s q" . vr/query-replace)
       ("C-M-%" . vr/query-replace)
       ;; if you use multiple-cursors, this is for you:
       ("M-s m" . vr/mc-mark)
       ;; to use visual-regexp-steroids's isearch instead of the built-in regexp isearch, also include the following lines:
       ("C-r" . isearch-backward)
       ("C-s" . isearch-forward)
       ("C-M-r" . vr/isearch-backward)
       ("C-M-s" . vr/isearch-forward))
      :config (require 'visual-regexp)) ;; TODO check if really necessary
  #+END_SRC
  Note: there seems to be a [[http://cpansearch.perl.org/src/YEWENBIN/Emacs-PDE-0.2.16/lisp/re-builder-x.el][re-builder supporting perl syntax]].

* Side bar
  #+BEGIN_SRC emacs-lisp
  (use-package dired-sidebar
    :commands dired-sidebar-toggle-sidebar
    :config
    (use-package all-the-icons-dired
      ;; M-x all-the-icons-install-fonts
      :commands all-the-icons-dired-mode))
  #+END_SRC

* Navigation
  I use [[https://github.com/abo-abo/ace-window][ace-window]] to quickly switch windows…
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :bind ("M-o" . ace-window))
  #+END_SRC

  … and avy to directly jump to a char.
  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :chords ("àà" . avy-goto-char-timer)
      :bind
      ("M-à" . avy-goto-word-1) ;; quickly jump to word by pressing its first letter
      ("C-à" . avy-goto-char-timer)) ;; quickly jump to any char in word
  #+END_SRC

  More navigation commands:
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-S-p") 'up-arrow)
    (global-set-key (kbd "C-S-n") 'down-arrow)

    (use-package imenu-anywhere
      :bind ("C-c ." . helm-imenu-anywhere))

    (use-package dumb-jump
      :bind (:map prog-mode-map
                  ("C-." . dumb-jump-go)
                  ("C-," . dumb-jump-back)
                  ("C-;" . dumb-jump-quick-look)))

    (use-package minimap
      :disabled)

    ;; Allow scrolling with mouse wheel
    (when (display-graphic-p) (progn(mouse-wheel-mode t)
                                    (mouse-avoidance-mode 'none)))

    (use-package goto-last-change
      :bind
      ("C-x C-/" . goto-last-change)
      ("C-x /" . goto-last-change)
      :config (make-command-repeatable 'goto-last-change))
  #+END_SRC

* Indentation, tabs, spaces & folding
  I just heard of editorconfig, which sounds like a sensible way of dealing with formatting issues accross multiple IDEs/Projects/developers
  #+BEGIN_SRC emacs-lisp
    (use-package editorconfig)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c w") 'delete-trailing-whitespace)

    (use-package aggressive-indent
      :hook (prog-mode . aggressive-indent-mode))

    ;;Indentation
    (setq-default tab-width 2
                  c-auto-newline t
                  c-basic-offset 2
                  c-block-comment-prefix ""
                  c-default-style "k&r"
                  indent-tabs-mode nil ;; <tab> inserts spaces, not tabs and spaces
                  sentence-end-double-space nil) ;; Sentences end with a single space

    ;; use tab to auto-comlete if indentation is right
    (setq tab-always-indent 'complete)

    (use-package shrink-whitespace
      :bind ("C-x C-o" . shrink-whitespace))

    (global-set-key (kbd "C-%") 'ale/toggle-selective-display)
  #+END_SRC

*** Folding
    I use origami for code folding:
    #+BEGIN_SRC emacs-lisp
      (use-package origami
        :bind (:map origami-mode-map
                    ("C-x x" . origami-toggle-all-nodes)
                    ("C-x y" . origami-show-only-node)
                    ("C-<tab>" . origami-recursively-toggle-node))
        :hook (prog-mode . origami-mode))
    #+END_SRC
    I also use “selective display” as a more generic folding method.


    #+BEGIN_SRC emacs-lisp
      (use-package vimish-fold
        :defer 1
        :bind
        (:map vimish-fold-folded-keymap ("<tab>" . vimish-fold-unfold)
              :map vimish-fold-unfolded-keymap ("<tab>" . vimish-fold-refold))
        :init
        (setq-default vimish-fold-dir (expand-file-name ".vimish-fold/" user-emacs-directory))
        (vimish-fold-global-mode 1)
        :config
        (setq-default vimish-fold-header-width 79))

      (defhydra hydra-fold (:color pink)
        "
        ^
        ^Fold^              ^Do^                ^Jump^              ^Toggle^
        ^────^──────────────^──^────────────────^────^──────────────^──────^────────────
        _q_ quit            _f_ fold            _p_ previous        _<tab>_ current
        ^ ^                 _k_ kill            _n_ next            _a_ all
        ^ ^                 _K_ kill all        ^ ^                 ^ ^
        ^ ^                 ^ ^                 ^ ^                 ^ ^
        "
        ("q" nil)
        ("<tab>" vimish-fold-toggle)
        ("a" vimish-fold-toggle-all)
        ("p" vimish-fold-previous-fold)
        ("n" vimish-fold-next-fold)
        ("f" vimish-fold)
        ("k" vimish-fold-delete)
        ("K" vimish-fold-delete-all))
      (global-set-key (kbd "C-c <tab>") 'hydra-fold/body)
    #+END_SRC

* Completion & help
** Completion
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :config
       (dim-minor-name 'company-mode nil)
       (global-company-mode) ;; enable company in all buffers
       (setq company-dabbrev-downcase nil
             company-show-numbers t))

     (use-package browse-kill-ring
       :config
       (browse-kill-ring-default-keybindings)
       (setq browse-kill-ring-quit-action 'save-and-restore))

     ;; case-insensitive policy
     (setq completion-ignore-case t
           pcomplete-ignore-case t
           read-file-name-completion-ignore-case t
           read-buffer-completion-ignore-case t)
   #+END_SRC

** Undo
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree ;; powerfull undo/redo mode
       :bind (("C-M-/" . undo-tree-redo)
              ("C-c u" . hydra-undo-tree/undo-tree-undo))
       :config
       (dim-minor-name 'undo-tree-mode " ⇞")
       (global-undo-tree-mode)
       (setq undo-tree-visualizer-timestamps t
             undo-tree-visualizer-diff t
             undo-outer-limit 300000000)
       (defhydra hydra-undo-tree
         (:color yellow :hint nil)
         "
       _p_: undo  _n_: redo _s_: save _l_: load   "
         ("p"   undo-tree-undo)
         ("n"   undo-tree-redo)
         ("s"   undo-tree-save-history)
         ("l"   undo-tree-load-history)
         ("u"   undo-tree-visualize "visualize" :color blue)
         ("q"   nil "quit" :color blue)))

   #+END_SRC

** Ivy, counsel, swiper
   Once in a while, I try to use {ivy|counsel|swiper} (only to go back to helm ^^).
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :disabled
       :config
       (dim-minor-name 'ivy-mode nil)
       (ivy-mode nil)
       ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
       (setq ivy-use-virtual-buffers t)
       ;; number of result lines to display
       (setq ivy-height 30)
       ;; does not count candidates
       (setq ivy-count-format "%d/%d ")
       ;; no regexp by default
       (setq ivy-initial-inputs-alist nil)
       ;; configure regexp engine.
       (setq ivy-re-builders-alist
             ;; allow input not in order
             '((t . ivy--regex-ignore-order))))

     (use-package counsel
       :bind ("M-s s" . counsel-grep-or-swiper))
   #+END_SRC

** Helm
*** Helm package
    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :chords
        ("bf" . helm-for-files) ;; helm-for-file looks everywhere, no need for anything else
        ("éè" . my-do-ag-project-root-or-dir) ;; incremental grep in project
        :bind
        (("M-x" . helm-M-x) ;; superior to M-x
         ("C-x M-x" . execute-extended-command)
         ("C-h a" . helm-apropos)
         ("C-h f" . helm-apropos)
         ("C-h v" . helm-apropos)
         ("M-ç" . hydra-helm/body)
         ("C-ç" . hydra-helm/body)
         ("C-c h" . hydra-helm/body)
         :map helm-map
         ("M-«" . helm-beginning-of-buffer)
         ("M-»" . helm-end-of-buffer))
        :config
        (dim-minor-name 'helm-mode nil)
        (defhydra hydra-helm(:color teal :hint nil)
          "
          ^Helm^       ^Open^                 ^Search^                 ^Doc^            ^Run^
          ^────^───────^────^─────────────────^──────^─────────────────^───^────────────^───^─────────────
          _q_ quit     _C-p_ switch project   _._ imenu                _b_ bindings     _A_ apt
          _r_ resume   _p_   switch project   _G_ git-grep             _d_ dash         _P_ elisp packages
          ^ ^          _f_   files            _a_ grep project or dir  _h_ apropos      _c_ org-capture
          ^ ^          _C-ç_ files (custom)   _g_ grep                 _m_ man-woman    _t_ top
          ^ ^          _R_   register         _o_ occur                _s_ google       _x_ run ext.
          ^ ^          ^ ^                    ^ ^                      _w_ wikipedia    ^ ^
          "
          ;; open
          ("C-p" helm-projectile-switch-project)
          ("p" helm-projectile-switch-project)
          ("f" helm-find-files)
          ("C-ç" helm-mini)
          ("M-ç" helm-mini)
          ("R" helm-register)
          ;; search
          ("." helm-imenu-anywhere)
          ("G" helm-git-grep)
          ("a" my-do-ag-project-root-or-dir)
          ("g" helm-do-ag)
          ("o" helm-occur)
          ;; doc
          ("b" helm-descbinds)
          ("d" helm-dash)
          ("h" helm-apropos)
          ("m" helm-man-woman)
          ("s" helm-google-suggest)
          ("w" helm-wikipedia-suggest)
          ;; run
          ("A" helm-apt)
          ("P" helm-list-elisp-packages-no-fetch)
          ("c" helm-org-capture-templates)
          ("t" helm-top)
          ("x" helm-run-external-command)
          ;;
          ("r" helm-resume)
          ("q" nil))
        (defun my-do-ag-project-root-or-dir ()
          "call helm-do-ag-project-root if in project, helm-do-ag otherwise"
          (interactive)
          (require 'helm-ag)
          (let ((rootdir (helm-ag--project-root)))
            (unless rootdir (helm-do-ag))
            (helm-do-ag rootdir)))
        ;; activate additional features
        (helm-mode 0) ;; helm-mode only on demand
        (helm-autoresize-mode t)
        (setq helm-M-x-fuzzy-match t ;; optional fuzzy matching for helm-M-x
              helm-adaptive-mode t
              helm-ag-base-command "ag --nocolor --nogroup --smart-case"
              helm-ag-insert-at-point 'symbol
              helm-buffer-max-length nil
              helm-buffers-fuzzy-matching t
              helm-candidate-number-limit 300
              helm-echo-input-in-header-line nil
              helm-ff-file-name-history-use-recentf t
              helm-ff-skip-boring-files t
              helm-net-prefer-curl t
              helm-recentf-fuzzy-match t
              helm-for-files-preferred-list '(
                                              helm-source-buffers-list
                                              helm-source-projectile-buffers-list
                                              helm-source-recentf
                                              helm-source-projectile-files-list
                                              helm-source-bookmarks
                                              helm-source-file-cache
                                              helm-source-files-in-current-dir
                                              ;; helm-source-google-suggest
                                              helm-source-locate
                                              helm-source-projectile-projects
                                              helm-source-file-name-history
                                              ))
        (defun my/helm-find-files ()
          ;; https://stackoverflow.com/questions/11403862/how-to-have-emacs-helm-list-offer-files-in-current-directory-as-options
          (interactive)

          ;; From helm-buffers-list in helm-buffers.el
          (unless helm-source-buffers-list
            (setq helm-source-buffers-list
                  (helm-make-source " Buffers" 'helm-source-buffers)))

          ;; From file:elpa/helm-20160401.1302/helm-files.el::(with-helm-temp-hook%20'helm-after-initialize-hook
          ;; This lets me bring up results from locate without having to
          ;; exit and run a separate command.  Now I just have to remember
          ;; to use it…
          (with-helm-temp-hook 'helm-after-initialize-hook
            (define-key helm-map (kbd "C-x C-l")
              'helm-multi-files-toggle-to-locate))

          (helm-other-buffer (list helm-source-buffers-list
                                   helm-source-files-in-current-dir
                                   helm-source-bookmarks
                                   helm-source-recentf
                                   helm-source-projectile-files-list)
                             " * my/helm-find-files *")))
    #+END_SRC
*** More tools with Helm
    #+BEGIN_SRC emacs-lisp
      (use-package helm-descbinds
        :bind ("C-h b" . helm-descbinds))
    #+END_SRC

    Documentation with helm
    #+BEGIN_SRC emacs-lisp
      (use-package helm-dash)
    #+END_SRC

*** Searching with Helm
    #+BEGIN_SRC emacs-lisp
      (use-package ace-jump-helm-line
        :bind (:map helm-map ("M-à" . ace-jump-helm-line)))

      (use-package wgrep
        :bind (:map grep-mode-map
                    ("C-x C-q" . wgrep-change-to-wgrep-mode)
                    ("C-c C-c" . wgrep-finish-edit)))

      (use-package helm-ag
        :bind (:map helm-ag-mode-map
                    ("p" . previous-line)
                    ("n" . next-line)
                    ("C-x C-q" . wgrep-change-to-wgrep-mode)
                    ("C-c C-c" . wgrep-finish-edit)))

      (use-package helm-swoop
        :bind
        ("C-S-s" . helm-swoop)
        (:map isearch-mode-map
              ;; When doing isearch, hand the word over to helm-swoop
              ("M-i" . helm-swoop-from-isearch))
        (:map helm-swoop-map
              ;; From helm-swoop to helm-multi-swoop-all
              ("M-i" . helm-multi-swoop-all-from-helm-swoop)
              ;; Instead of helm-multi-swoop-all, you can also use helm-multi-swoop-current-mode
              ("M-m" . helm-multi-swoop-current-mode-from-helm-swoop)
              ;; Move up and down like isearch
              ("C-r" . helm-previous-line)
              ("C-s" . helm-next-line)
              ("C-r" . helm-previous-line)
              ("C-s" . helm-next-line))
        :config
        ;; Save buffer when helm-multi-swoop-edit complete
        (setq helm-multi-swoop-edit-save t

              ;; If this value is t, split window inside the current window
              helm-swoop-split-with-multiple-windows nil

              ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
              helm-swoop-split-direction 'split-window-vertically

              ;; If nil, you can slightly boost invoke speed in exchange for text color
              helm-swoop-speed-or-color t

              ;; ;; Go to the opposite side of line from the end or beginning of line
              helm-swoop-move-to-line-cycle t

              ;; Optional face for line numbers
              ;; Face name is `helm-swoop-line-number-face`
              helm-swoop-use-line-number-face t

              ;; If you prefer fuzzy matching
              helm-swoop-use-fuzzy-match nil))


      (use-package helm-git-grep)
    #+END_SRC

** Snippets
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :init (setq yas-snippet-dirs
                   `(,(concat user-emacs-directory "elpa/yasnippet-snippets-20180503.657/snippets")
                     ,(concat user-emacs-directory "etc/yasnippet/snippets")))
       :commands yas-new-snippet yas-insert-snippet
       :chords ("yq" . yas-insert-snippet)
       :bind
       ("<backtab>" . yas-ido-expand)
       ("C-h y" . yas-describe-tables)
       :config
       (use-package yasnippet-snippets)
       (yas-reload-all)
       (yas-global-mode 1)
       (add-to-list 'yas-prompt-functions 'yas-helm-prompt)
       ;; Completing point by some yasnippet key
       (defun yas-ido-expand ()
         "Lets you select (and expand) a yasnippet key"
         (interactive)
         (let ((original-point (point)))
           (while (and
                   (not (= (point) (point-min) ))
                   (not
                    (string-match "[[:space:]\n]" (char-to-string (char-before)))))
             (backward-word 1))
           (let* ((init-word (point))
                  (word (buffer-substring init-word original-point))
                  (list (yas-active-keys)))
             (goto-char original-point)
             (let ((key (remove-if-not
                         (lambda (s) (string-match (concat "^" word) s)) list)))
               (if (= (length key) 1)
                   (setq key (pop key))
                 (setq key (ido-completing-read "key: " list nil nil word)))
               (delete-char (- init-word original-point))
               (insert key)
               (yas-expand)))))
       (defun yas-helm-prompt (prompt choices &optional display-fn)
         "Use helm to select a snippet. Put this into `yas-prompt-functions.'"
         (interactive)
         (setq display-fn (or display-fn 'identity))
         (if (require 'helm-config)
             (let (tmpsource cands result rmap)
               (setq cands (mapcar (lambda (x) (funcall display-fn x)) choices))
               (setq rmap (mapcar (lambda (x) (cons (funcall display-fn x) x)) choices))
               (setq tmpsource
                     (list
                      (cons 'name prompt)
                      (cons 'candidates cands)
                      '(action . (("Expand" . (lambda (selection) selection))))
                      ))
               (setq result (helm-other-buffer '(tmpsource) "*helm-select-yasnippet"))
               (if (null result)
                   (signal 'quit "user quit!")
                 (cdr (assoc result rmap))))
           nil)))
     (defhydra hydra-yasnippet(:color teal :hint nil)
       "
       ^Snippet^     ^Insert^           ^Create^
       ^───────^─────^──────^───────────^──────^─────
       _t_ tables    _e_ ido expand     _n_ create
       _q_ quit      _i_ insert
       "
       ("e" yas-ido-expand)
       ("i" yas-insert-snippet)
       ("n" yas-new-snippet)
       ("t" yas-describe-tables)
       ("q" nil))
     (global-set-key (kbd "C-c y") 'hydra-yasnippet/body)
   #+END_SRC

*** More grepping
    #+BEGIN_SRC emacs-lisp
      (use-package winnow)
    #+END_SRC
* Text manipulation
** Region
   #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :bind ("C-c e" . er/expand-region))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
    (use-package region-bindings-mode
      :config (region-bindings-mode-enable))
   #+END_SRC

** Point movements
   #+BEGIN_SRC emacs-lisp
     (use-package move-text
       :config (move-text-default-bindings)) ;; M-up / M-down to move line or region

     (use-package zop-to-char
       :bind ("C-M-z" . zop-up-to-char))

     (use-package multiple-cursors
       :demand mc-mark-more
       :bind
       (
        ;; ("M-é" . set-rectangular-region-anchor)
        :map region-bindings-mode-map
        ("a" . mc/mark-all-like-this) ;; new cursor on each occurence of current region
        ("d" . mc/mark-all-symbols-like-this-in-defun)
        ("D" . mc/mark-all-dwim)
        ("p" . mc/mark-previous-like-this) ;; new cursor on previous occurence of current region
        ("n" . mc/mark-next-like-this) ;; new cursor on next occurence of current region
        ("P" . mc/unmark-previous-like-this)
        ("N" . mc/unmark-next-like-this)
        ("é" . mc/edit-lines) ;; new cursor on each line of region
        ("(" . mc/cycle-backward)
        (")" . mc/cycle-forward)
        ("m" . mc/mark-more-like-this-extended)
        ("h" . mc-hide-unmatched-lines-mode)
        ("v" . mc/vertical-align)
        ("|" . mc/vertical-align-with-space)
        ("r" . mc/reverse-regions)
        ("s" . mc/sort-regions)
        ("#" . mc/insert-numbers) ; use num prefix to set the starting number
        ("^" . mc/edit-beginnings-of-lines)
        ("$" . mc/edit-ends-of-lines)
        ("<down>" . move-text-down)
        ("<up>" . move-text-up)))

     (use-package smart-comment
       :bind ("M-;" . smart-comment))

     ;; Remove text in active region if inserting text
     (pending-delete-mode t)

     ;; join lines below onto current line
     (global-set-key (kbd "M-j")
                     (lambda ()
                       (interactive)
                       (join-line -1)))

     ;; Allow pasting selection outside of Emacs
     (setq-default select-enable-clipboard t
                   x-select-enable-clipboard t)

     (global-set-key (kbd "M-y") 'yank-pop)
     ;; easier access to transposition commands
     (global-set-key (kbd "C-x M-h") 'transpose-paragraphs)
     (global-set-key (kbd "C-§") 'transpose-paragraphs)
     (global-set-key (kbd "C-x M-s") 'transpose-sentences)
     (global-set-key (kbd "C-x M-t") 'transpose-sexps)

     (use-package repeatable ;; TODO add repeatable commands (or replace package with easy-repeat
       :ensure nil
       :load-path "elisp")

     (global-set-key (kbd "C-x _") 'ale/toggle-camel-snake-kebab-case)
   #+END_SRC
** Diffing
   #+BEGIN_SRC emacs-lisp
     (use-package ztree
       :defer t)
   #+END_SRC

* Buffer & window manipulation
** Windows
   Better access to window manipulation commands:
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-\"") 'delete-other-windows)
     (global-set-key (kbd "C-«") 'split-window-below)
     (global-set-key (kbd "C-»") 'split-window-right)
     (global-set-key (kbd "C-*") 'delete-window)
   #+END_SRC

   Revert windows on ediff exit - needs winner mode.
   #+BEGIN_SRC emacs-lisp
     (use-package winner
       :config
       (winner-mode)
       (add-hook 'ediff-after-quit-hook-internal 'winner-undo))
   #+END_SRC

** Scratch
   #+BEGIN_SRC emacs-lisp
     (use-package multi-scratch ;; scratch
       :ensure nil
       :load-path "elisp"
       :bind
       ("C-x \"" . multi-scratch-new) ;; create new scratch buffer named “new<#>”
       ("M-\"" . multi-scratch-new) ;; create new scratch buffer named “new<#>”
       ("C-x «" . multi-scratch-prev) ;; jump to previous scratch buffer
       ("C-x »" . multi-scratch-next) ;; jump to next scratch buffer
       :config (setq multi-scratch-buffer-name "new"))

     (use-package temporary-persistent)

     (use-package persistent-scratch
       :config (persistent-scratch-setup-default))

     ;; buffer & file handling
     (global-set-key (kbd "M-é") 'previous-buffer) ;; call previous buffer
     (global-set-key (kbd "M-è") 'next-buffer) ;; call next buffer
     (key-chord-define-global (kbd "«»") 'ibuffer) ;; call ibuffer
     (global-set-key (kbd "C-x C-b") 'electric-buffer-list) ;; electric buffer by default
     (global-set-key (kbd "C-c o") 'bury-buffer) ;; put buffer at bottom of buffer list
     (global-set-key (kbd "C-c k") 'kill-this-buffer) ;; kill buffer without confirmation
     (key-chord-define-global (kbd "+-") 'kill-this-buffer) ;; kill buffer without confirmation
   #+END_SRC

** iBuffer
   #+BEGIN_SRC emacs-lisp
     ;; (setq ibuffer-formats
     ;;       '((mark modified read-only " "
     ;;               (name 30 30 :left :elide) " "
     ;;               (size 9 -1 :right) " "
     ;;               (mode 16 16 :left :elide) " " filename-and-process)
     ;;         (mark " " (name 16 -1) " " filename)))

     (use-package ibuffer-vc
       :config
       ;; Use human readable Size column instead of original one
       (define-ibuffer-column size-h
         (:name "Size" :inline t)
         (cond
          ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
          ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
          ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
          (t (format "%8d" (buffer-size)))))


       (add-hook 'ibuffer-hook
                 (lambda ()
                   (ibuffer-vc-set-filter-groups-by-vc-root)
                   (unless (eq ibuffer-sorting-mode 'alphabetic)
                     (ibuffer-do-sort-by-alphabetic))))
       (setq ibuffer-formats
             '((mark modified " " read-only " " vc-status-mini " "
                     (name 50 50 :left :elide) " "
                     (size-h 9 -1 :right) " "
                     (mode 16 16 :left :elide) " "
                     ;; (vc-status 14 14 :left) " "
                     filename-and-process))))

     ;; Change how buffer names are made unique
     (setq uniquify-buffer-name-style 'post-forward
           uniquify-separator ":")

     ;; Auto refresh all buffers
     (global-auto-revert-mode 1)
     (dim-minor-name 'global-auto-revert-mode " ↺")
     (dim-minor-name 'auto-revert-mode nil)
   #+END_SRC

** Minibuffer
   #+BEGIN_SRC emacs-lisp
     ;; C-M-e to edit minibuffer in a full-size buffer
     (use-package miniedit
       :commands minibuffer-edit
       :init (miniedit-install))
   #+END_SRC

* Version control
** General
   #+BEGIN_SRC emacs-lisp
     (use-package git-timemachine)

     (use-package git-messenger
       :bind (:map git-messenger-map
                   ("d" . git-messenger:popup-diff)
                   ("s" . git-messenger:)
                   ("c" . git-messenger:copy-commit-id))
       :hook (git-messenger:popup-buffer-hook . magit-commit-mode)
       :config (setq git-messenger:show-detail t))

     (use-package gitignore-mode)

     (use-package gitconfig-mode
       :config
       (autoload 'gitconfig-mode "gitconfig-mode" "Major mode for editing gitconfig files." t)
       (add-to-list 'auto-mode-alist '(".gitconfig$" . gitconfig-mode)))

     (use-package git-gutter
       :hook (prog-mode)
       :bind
       ("M-N" . git-gutter:next-hunk)
       ("M-P" . git-gutter:previous-hunk)
       :config
       (dim-minor-name 'git-gutter-mode nil)
       (global-git-gutter-mode +1)
       (setq git-gutter:ask-p nil
             git-gutter:hide-gutter t))

     ;; always follow symbolic links for files under VC
     (use-package vc
       :config (setq vc-follow-symlinks t))
   #+END_SRC

** Diff
   #+BEGIN_SRC emacs-lisp
     (use-package vdiff
       :disabled
       :bind (:map vdiff-mode-map
                   ("C-c" . vdiff-mode-prefix-map))
       :init (define-key vdiff-mode-map (kbd "C-c") vdiff-mode-prefix-map)
       :config
       (setq
        ;; Whether to lock scrolling by default when starting vdiff
        vdiff-lock-scrolling t
        ;; external diff program/command to use
        vdiff-diff-program "diff"
        ;; Extra arguments to pass to diff. If this is set wrong, you may break vdiff.
        vdiff-diff-program-args ""
        ;; Commands that should be executed in other vdiff buffer to keep lines in
        ;; sync. There is no need to include commands that scroll the buffer here,
        ;; because those are handled differently.
        vdiff-mirrored-commands '(next-line
                                  previous-line
                                  beginning-of-buffer
                                  end-of-buffer)
        ;; Minimum number of lines to fold
        vdiff-fold-padding 2
        ;; Unchanged lines to leave unfolded around a fold
        vdiff-min-fold-size 4
        ;; Function that returns the string printed for a closed fold. The arguments
        ;; passed are the number of lines folded, the text on the first line, and the
        ;; width of the buffer.
        vdiff-fold-string-function 'vdiff-fold-string-default))
   #+END_SRC

** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :chords ("qg" . magit-status) ;; run git status for current buffer
       :bind (:map magit-file-mode-map ("C-x g" . hydra-git/body))
       :config
       (setq magit-last-seen-setup-instructions "1.4.0")
       (magit-define-popup-switch 'magit-log-popup ?w "date-order" "--date-order"))

     (defhydra hydra-git(:color blue :hint nil)
       "
       ^Git^     ^Gutter^           ^Log^              ^Other^
       ^───^─────^──────^───────────^───^──────────────^─────^───────
       _q_ quit  _n_ next hunk      _b_ blame          _._ status
       ^ ^       _p_ prev. hunk     _l_ file history   _g_ message
       ^ ^       _r_ revert hunk    _t_ time machine   _f_ file popup
       ^ ^       _s_ stage hunk     ^ ^                ^ ^
       ^ ^       _u_ gutter mode    ^ ^                ^ ^
       "
       ;; gutter
       ("n" git-gutter:next-hunk :color pink)
       ("p" git-gutter:previous-hunk :color pink)
       ("r" git-gutter:revert-hunk :color pink)
       ("s" git-gutter:stage-hunk :color pink)
       ("u" git-gutter-mode)
       ;; log
       ("b" magit-blame)
       ("l" magit-log-buffer-file)
       ("t" git-timemachine)
       ;; other
       ("." magit-status)
       ("g" git-messenger:popup-message)
       ("f" magit-file-popup)

       ("q" nil))
     (global-set-key (kbd "C-x g") 'hydra-git/body)

     ;; A saner ediff
     (setq ediff-diff-options "-w"
           ediff-split-window-function 'split-window-horizontally
           ediff-window-setup-function 'ediff-setup-windows-plain)

     (use-package magit-org-todos
       :after magit
       :config
       (magit-org-todos-autoinsert))
   #+END_SRC

* Project management
  I use [[https://github.com/bbatsov/helm-projectile][helm-projectile]] to manage my projects (most of the time git projects).
  #+BEGIN_SRC emacs-lisp
    (use-package helm-projectile
      :config
      (dim-minor-name 'projectile-mode nil)
      (projectile-global-mode) ;; activate projectile-mode everywhere
      (helm-projectile-on)
      (setq projectile-completion-system 'helm
            projectile-require-project-root nil
            projectile-enable-caching t ;; enable caching for projectile-mode
            projectile-switch-project-action 'projectile-vc) ;; magit-status or svn
      (def-projectile-commander-method ?d
        "Open project root in dired."
        (projectile-dired))
      (def-projectile-commander-method ?f
        "Git fetch."
        (magit-status)
        (call-interactively #'magit-fetch-current)))
  #+END_SRC

  Someone advocates for [[http://manuel-uberti.github.io/programming/2017/08/06/eyebrowse/][eye-browse]], which I need to try: (note: the validate-setq function requires the [[http://endlessparentheses.com/validate-el-schema-validation-for-emacs-lisp.html][validate.el]] package)
  #+BEGIN_SRC emacs-lisp
    (use-package eyebrowse ;; Easy workspaces creation and switching
      :disabled
      :ensure validate
      :config
      (validate-setq eyebrowse-mode-line-separator " "
                     eyebrowse-new-workspace t)
      (eyebrowse-mode t))

  #+END_SRC

* Date, time & calendar
** Date & time in the mode-line
   I want the date and time displayed in standard format, no M/D/Y nonsense.
   #+BEGIN_SRC emacs-lisp
     (setq display-time-day-and-date t ;; display date and time
           display-time-24hr-format t ;; 24h time format
           european-calendar-style t ;; day/month/year format for calendar
           calendar-week-start-day 1 ;; start week on Monday
           display-time-string-forms '((if (and (not display-time-format) display-time-day-and-date)
                                           (format-time-string "%H:%M, %a %d %b " now))))
     (display-time)

     (defhydra hydra-dates (:color blue :hint nil)
       "
     ^
     ^Dates^             ^Insert^            ^Insert with Time^
     ^─────^─────────────^──────^────────────^────────────────^
     _q_ quit            _d_ short           _D_ short
     ^ ^                 _i_ iso             _I_ iso
     ^ ^                 _l_ long            _L_ long
     ^ ^                 ^ ^                 ^ ^
     "
       ("q" nil)
       ("d" ab/date-short)
       ("D" ab/date-short-with-time)
       ("i" ab/date-iso)
       ("I" ab/date-iso-with-time)
       ("l" ab/date-long)
       ("L" ab/date-long-with-time))
     (global-set-key (kbd "C-c d") 'hydra-dates/body)
   #+END_SRC

** TODO Weather widget in the mode-line
   #+BEGIN_SRC emacs-lisp
    (use-package weatherline-mode
      :disabled
      :ensure nil
      :load-path "elisp"
      :config
      (setq weatherline-location-id "2988507")
      (weatherline-mode))
   #+END_SRC

** Calendar widget
   I use [[https://github.com/kiwanami/emacs-calfw][calfw]] for a nice display of my different calendars:
   #+BEGIN_SRC emacs-lisp
    (use-package calfw
      :config
      (use-package calfw-gcal)
      (use-package calfw-cal)
      (use-package calfw-ical)
      (use-package calfw-org)
      (defun open-calendar ()
        (interactive)
        (cfw:open-calendar-buffer
         :contents-sources
         (list
          (cfw:ical-create-source "Google Calendar" my-private-primary-gcal-url "olive")
          (cfw:ical-create-source "Vacances" "http://dynical.com/iCal/weather.ics/?lng=fr&zone=ile-de-france|paris|75100&zone_=E" "yellow")
          (cfw:org-create-source "Green")  ; orgmode source
          ;; (cfw:cal-create-source "Orange") ; diary source
          (cfw:ical-create-source "hellfest" my-private-secondary-gcal-url "Brown")
          (cfw:ical-create-source "Moon" "http://cantonbecker.com/astronomy-calendar/astrocal.ics" "Gray")  ; ICS source1
          ))))
   #+END_SRC

** Weather widget
   Weather from wttr.in
   #+BEGIN_SRC emacs-lisp
    ;; weather from wttr.in
    (use-package wttrin
      :commands wttrin
      :config
      (setq wttrin-default-cities
            '("Paris" "Londres" "Nantes" "Lyon" "Berlin" "Manchester" "Nice")))
   #+END_SRC

* Org-mode
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :bind
      (("\C-c a" . org-agenda)
       ("\C-c b" . org-iswitchb)
       :map org-mode-map
       ("\C-c l" . org-store-link)
       ("\C-c j" . ale/jirify)
       ("\C-c t" . org-begin-template))
      :chords ("gx" . org-capture)
      :init (require 'org-agenda)
      :ensure ob-restclient
      :config
      ;; active Babel languages
      (setq org-confirm-babel-evaluate nil)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((R . nil)
         (restclient . t)
         (emacs-lisp . t)))

      ;; ORG-CAPTURE
      (setq notes-file (concat user-emacs-directory "notes.org")
            snippet-file (concat user-emacs-directory "code-snippets.txt")
            diary-file (concat my-private-remote-home-dir my-private-remote-diary-org-file)
            todo-file (concat my-private-remote-home-dir my-private-remote-todo-org-file)
            org-capture-templates
            '(
              ;; local
              ("n" "local - note" item (file+olp+datetree notes-file) "%i%?")
              ("y" "local - code snippet" plain (file snippet-file) "\n%i%?")
              ;; remote
              ("D" "remote - diary item" item (file+olp+datetree diary-file) "%i%?")
              ("T" "remote - TODO" entry (file+headline todo-file "VRAC") "* TODO %?\n\t%i")))

      ;; specific agenda files
      (add-to-list 'org-agenda-files my-private-work-diary-org-file)

      (setq org-export-coding-system 'utf-8
            org-completion-use-ido t
            org-ellipsis " ▼")

      ;; font and faces customization
      (setq org-todo-keyword-faces
            '(("INPR" . (:foreground "yellow" :weight bold))
              ("STARTED" . (:foreground "yellow" :weight bold))
              ("WAIT" . (:foreground "yellow" :weight bold))
              ("WIP" . (:foreground "yellow" :weight bold))
              ("INPROGRESS" . (:foreground "yellow" :weight bold))))

      ;; update cookies [1/2] when deleting lines
      (defun myorg-update-parent-cookie ()
        (when (equal major-mode 'org-mode)
          (save-excursion
            (ignore-errors
              (org-back-to-heading)
              (org-update-parent-todo-statistics)))))

      (defadvice org-kill-line (after fix-cookies activate)
        (myorg-update-parent-cookie))

      (defadvice kill-whole-line (after fix-cookies activate)
        (myorg-update-parent-cookie)))

    (use-package htmlize)

    (use-package swagger-to-org)
  #+END_SRC

  Use fancy bullets in org-mode:
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC

  TODO install and try package: [[https://github.com/Kungsgeten/org-brain][org-brain]]

* Text
  #+BEGIN_SRC emacs-lisp
    (setq default-major-mode 'text-mode) ;; text-mode by default
    (add-hook 'text-mode-hook 'flyspell-mode) ;; flyspell by default
    (dim-minor-name 'flyspell-mode " ✓")
    (add-hook 'text-mode-hook 'visual-line-mode) ;; auto-wrapping (soft wrap) in text-mode
    (dim-minor-name 'visual-line-mode " ↩")
    (add-hook 'text-mode-hook 'dubcaps-mode) ;; auto-correct double capitals
    (dim-minor-name 'dubcaps-mode " ⇧")
    (remove-hook 'text-mode-hook #'turn-on-auto-fill) ;; visual-line-mode instead of auto-fill

    (use-package define-word)
  #+END_SRC

* Mail
  #+BEGIN_SRC emacs-lisp
    ;; (remove-hook 'html-helper-mode-hook 'flyspell-mode) ;; auto-correct disabled by default
    (add-hook 'mail-mode-hook 'visual-line-mode) ;; wrapping in mail-mode
  #+END_SRC

  Let’s use emacs to read our mail (with mu4e) :
  #+BEGIN_SRC emacs-lisp
    (use-package mu4e
      :disabled
      :load-path "/usr/share/emacs/site-lisp/mu4e"
      :ensure nil
      :config
      (setq mu4e-maildir (expand-file-name "~/Maildir")
            mu4e-drafts-folder "/[Gmail].Drafts"
            mu4e-sent-folder   "/[Gmail].Sent Mail"
            mu4e-trash-folder  "/[Gmail].Trash")

      ;; don't save message to Sent Messages, GMail/IMAP will take care of this

      (setq mu4e-sent-messages-behavior 'delete)

      ;; setup some handy shortcuts

      (setq mu4e-maildir-shortcuts
            '(("/INBOX"             . ?i)
              ("/[Gmail].Sent Mail" . ?s)
              ("/[Gmail].Trash"     . ?t)))

      ;; allow for updating mail using 'U' in the main view:

      (setq mu4e-get-mail-command "offlineimap")

      ;; something about ourselves

      (setq user-mail-address my-private-mail-address
            user-full-name my-private-full-name
            ;; I don't use a signature…
            message-signature "\n-- \nArthur Léothaud"))
  #+END_SRC

  I send email using smtpmail. We have to make sure the gnutls command line utils are installed; package 'gnutls-bin' in Debian/Ubuntu, 'gnutls' in Archlinux.
  #+BEGIN_SRC emacs-lisp
    (use-package smtpmail
      :ensure nil
      :config (setq message-send-mail-function 'smtpmail-send-it
                    starttls-use-gnutls t
                    smtpmail-starttls-credentials '((my-private-smtp-server my-private-smtp-server-port nil nil))
                    smtpmail-auth-credentials (expand-file-name my-private-auth-file)
                    smtpmail-default-smtp-server my-private-smtp-server
                    smtpmail-smtp-server my-private-smtp-server
                    smtpmail-smtp-service my-private-smtp-server-port
                    smtpmail-debug-info t))
  #+END_SRC

* Programming
** DONE Formatting
   #+BEGIN_SRC emacs-lisp
     (use-package prog-fill
       :bind
       (:map prog-mode-map
             ("M-q" . prog-fill)))

   #+END_SRC
** Dealing with parens
   I tried paredit, didn’t really like the “strict” thing. Hope will get used to smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens-config
       :ensure smartparens
       :hook ((prog-mode markdown-mode) . turn-on-smartparens-mode)
       :init (dim-minor-name 'smartparens-mode " ()" 'smartparens)
       :config
       (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil))

     (defhydra hydra-parens(:color teal :hint nil)
       "
       ^Parens^  ^Insert^    ^Delete^           ^Transpose^           ^Slurp^             ^Barf^
       ^──────^──^──────^────^──────^───────────^─────────^───────────^─────^─────────────^────^───────────
       _q_ quit  _c_ clone   _k_ kill           _t_ transpose         _a_ absorb          _e_ emit
       ^ ^       _p_ split   _C-k_ kill hybrid  _T_ transpose hybrid  _j_ join            « barf backward
       ^ ^       ^ ^         _r_ raise          ^ ^                   _(_ slurp backward  » barf forward
       ^ ^       ^ ^         _s_ splice         ^ ^                   _)_ slurp hybrid
       ^ ^       ^ ^         _M-s_ splice       ^ ^                   _w_ rewrap
       "
       ;; insert
       ("c" sp-clone-sexp)
       ("p" sp-split-sexp)

       ;; delete
       ("k" sp-kill-sexp)
       ("C-k" sp-kill-hybrid-sexp)
       ("r" sp-raise-sexp)
       ("s" sp-splice-sexp)
       ("M-s" sp-splice-sexp)

       ;; transpose
       ("t" sp-transpose-sexp)
       ("T" sp-transpose-hybrid-sexp)

       ;; slurp
       ("a" sp-absorb-sexp)
       ("j" sp-join-sexp)
       ("(" sp-backward-slurp-sexp)
       (")" sp-slurp-hybrid-sexp)
       ("w" sp-rewrap-sexp)

       ;; barf
       ("e" sp-emit-sexp)
       ("«" sp-backward-barf-sexp)
       ("»" sp-forward-barf-sexp)

       ("q" nil))
     (global-set-key (kbd "M-s M-s") 'hydra-parens/body)
   #+END_SRC

** Shell
   #+BEGIN_SRC emacs-lisp
     (add-hook 'sh-mode-hook (lambda () (setq tab-width 2 sh-basic-offset 2 indent-tabs-mode t)))
     (add-hook 'sh-mode-hook 'flycheck-mode)
     ;;(autoload 'sh-mode "sh-mode" "Major mode for editing shell scripts." t)
     (add-to-list 'auto-mode-alist '(".*rc$" . sh-mode))
     (add-to-list 'auto-mode-alist '(".*bash.*$" . sh-mode))

     (use-package fish-mode
       :mode ("\\.fish$" . fish-mode)
       :config (setq tab-width 2
                     sh-basic-offset 2
                     fish-indent-offset 2
                     indent-tabs-mode t))

     ;; Normal tab completion in Eshell
     (setq eshell-cmpl-cycle-completions nil)

     ;; another C-d in shell kills shell buffer
     (defun comint-delchar-or-eof-or-kill-buffer (arg)
       (interactive "p")
       (if (null (get-buffer-process (current-buffer)))
           (kill-buffer)
         (comint-delchar-or-maybe-eof arg)))

     (add-hook 'shell-mode-hook
               (lambda ()
                 (define-key shell-mode-map
                   (kbd "C-d") 'comint-delchar-or-eof-or-kill-buffer)))

     (use-package shell-pop
       :config
       (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
       (setq shell-pop-term-shell "/bin/bash")
       ;; need to do this manually or not picked up by `shell-pop'
       (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))
   #+END_SRC

** Lisp
   #+BEGIN_SRC emacs-lisp
     (use-package lisp-mode
       :ensure nil
       :config (flycheck-mode t)
       :bind (:map lisp-mode-map
                   ("C-c C-c" . eval-region)
                   ("C-c C-r" . eval-and-replace)))

     (use-package emacs-lisp-mode
       :ensure nil
       :bind (:map emacs-lisp-mode-map
                   ("C-c C-c" . eval-region)
                   ("C-c C-r" . eval-and-replace)))

     (use-package ielm
       :ensure nil
       :hook (ielm-mode . (lambda () (setq-local scroll-margin 0))))

     (use-package elisp-slime-nav
       :after emacs-lisp-mode
       :hook (emacs-lisp-mode-hook))
   #+END_SRC

** Sql
   #+BEGIN_SRC emacs-lisp
     (use-package sql
       :ensure nil
       :hook
       (sql-mode . (lambda () (setq-local truncate-lines nil)))
       (sql-mode . (lambda () (setq-local linesize 9999)))
       (sql-interactive-mode . sqli-add-hooks)
       (sql-interactive-mode . (lambda ()
                                 (setq-local comint-output-filter-functions 'comint-truncate-buffer
                                             comint-buffer-maximum-size 5000
                                             comint-scroll-show-maximum-output t
                                             comint-input-ring-size 500)))
       :interpreter "sql"
       :mode
       ("\\.sql\\'"
        "\\.pks\\'"
        "\\.pkb\\'"
        "\\.mvw\\'"
        "\\.con\\'"
        "\\.ind\\'"
        "\\.sqs\\'"
        "\\.tab\\'"
        "\\.trg\\'"
        "\\.vw\\'"
        "\\.prc\\'"
        "\\.pk\\'"))

     ;;; sql-oracle connection without a tnsnames.ora
     ;; (description=(address_list=(address=(protocol=TCP)(host=myhost.example.com)(port=1521)))(connect_data=(SERVICE_NAME=myservicename)))
     ;; GÉO : (description=(address_list=(address=(protocol=TCP)(host=DEV-GEO-BACK)(port=1521)))(connect_data=(SID=GEODEV1)
   #+END_SRC

** Groovy
   #+BEGIN_SRC emacs-lisp
     (use-package groovy-mode)
   #+END_SRC

** Ruby
   #+BEGIN_SRC emacs-lisp
     (use-package ruby-mode
       :mode "\\.rb\\'"
       :interpreter "ruby")
   #+END_SRC

** Java
   Enable flycheck for Java:
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-java ;; flycheck minor mode for java
       :ensure nil
       :load-path "elisp/")
   #+END_SRC

*** TODO malabar-mode (à tester)
    #+BEGIN_SRC emacs-lisp
      (use-package malabar-mode
        :disabled
        :config
        ;; JAVA (malabar-mode)
        ;; mimic the IDEish compile-on-save behaviour
        ;; (load-file "~/outils/cedet/cedet-devel-load.el")
        (load-file "~/projets/malabar-mode/src/main/lisp/malabar-mode.el")
        (load-file "~/projets/cedet/cedet-devel-load.el")
        (add-hook 'after-init-hook (lambda ()
                                     (message "activate-malabar-mode")
                                     (activate-malabar-mode)))

        (add-hook 'malabar-java-mode-hook 'flycheck-mode)
        (add-hook 'malabar-groovy-mode-hook 'flycheck-mode)
        (add-hook 'malabar-mode-hook (lambda () (add-hook 'after-save-hook 'malabar-compile-file-silently nil t)))
        (add-hook 'malabar-mode-hook
                  (lambda ()
                    (add-hook 'after-save-hook 'malabar-http-compile-file-silently
                              nil t))))
    #+END_SRC

*** TODO eclim (à tester)
    #+BEGIN_SRC emacs-lisp
      (use-package eclim
        :disabled
        :config
        (global-eclim-mode)
        (require 'eclimd)
        (setq eclim-eclipse-dirs "~/outils/eclipse/eclipse-mars"
              eclim-executable "~/outils/eclipse/eclipse-mars/eclim")
        ;; (require 'company)
        (require 'company-emacs-eclim)
        (global-company-mode t)
        (company-emacs-eclim-setup)
        ;; (company-emacs-eclim-ignore-case t)
        (add-hook 'java-mode-hook (lambda () (setq flycheck-java-ecj-jar-path "/home/arthur/outils/java/ecj-4.5.jar")))
        (add-hook 'java-mode-hook 'eclim-mode))
    #+END_SRC

*** ecb (à tester)
    #+BEGIN_SRC emacs-lisp
      (use-package ecb :disabled)
    #+END_SRC
*** TODO meghanada (à tester)
    #+BEGIN_SRC emacs-lisp
      (use-package autodisass-java-bytecode
        :disabled
        :defer t)

      (use-package google-c-style
        :disabled
        :commands google-set-c-style)

      (use-package meghanada
        :disabled
        :defer t
        :ensure highlight-symbol
        :config
        (add-hook 'java-mode-hook
                  (lambda ()
                    (google-set-c-style)
                    (google-make-newline-indent)
                    (meghanada-mode t)
                    (smartparens-mode t)
                    (rainbow-delimiters-mode t)
                    (highlight-symbol-mode t)
                    ;; (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)
                    ))
        (use-package realgud)
        (setq indent-tabs-mode nil)
        (setq tab-width 4)
        (setq c-basic-offset 4)
        (setq meghanada-server-remote-debug t)
        (setq meghanada-javac-xlint "-Xlint:all,-processing")
        (defhydra hydra-meghanada (:hint nil :exit t)
          "
          ^Meghanada^     ^Edit^                           ^Test or Task^
          ^─────────^─────^────^───────────────────────────^────────────^───────────────────
          _q_ exit        _f_ meghanada-compile-file       _m_ meghanada-restart
          _z_ leave       _c_ meghanada-compile-project    _t_ meghanada-run-task
          ^ ^             _o_ meghanada-optimize-import    _j_ meghanada-run-junit-test-case
          ^ ^             _s_ meghanada-switch-test-case   _J_ meghanada-run-junit-class
          ^ ^             _v_ meghanada-local-variable     _R_ meghanada-run-junit-recent
          ^ ^             _i_ meghanada-import-all         _r_ meghanada-reference
          ^ ^             _g_ magit-status                 _T_ meghanada-typeinfo
          ^ ^             _l_ helm-ls-git-ls
          "
          ("f" meghanada-compile-file)
          ("m" meghanada-restart)

          ("c" meghanada-compile-project)
          ("o" meghanada-optimize-import)
          ("s" meghanada-switch-test-case)
          ("v" meghanada-local-variable)
          ("i" meghanada-import-all)

          ("g" magit-status)
          ("l" helm-ls-git-ls)

          ("t" meghanada-run-task)
          ("T" meghanada-typeinfo)
          ("j" meghanada-run-junit-test-case)
          ("J" meghanada-run-junit-class)
          ("R" meghanada-run-junit-recent)
          ("r" meghanada-reference)

          ("q" exit)
          ("z" nil))
        :bind
        (:map meghanada-mode-map
              ("M-m t" . meghanada-switch-testcase)
              ("M-m RET" . meghanada-local-variable)
              ("M-m ." . helm-imenu)
              ("M-m r" . meghanada-reference)
              ("M-m i" . meghanada-typeinfo)
              ("M-m M-m" . hydra-meghanada/body))
        :commands
        (meghanada-mode))

    #+END_SRC
** Javascript
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
       ;; :bind (:js2-mode-map ("C-c C-c" . compile))
       :mode ("\\.js\\'\\|\\.json\\'" . js2-mode)
       :hook ((json-mode . json-pretty-print)
              (js2-mode . json-pretty-print-buffer)
              (js2-mode . aggressive-indent-mode)
              (js2-mode . js2-refactor-mode))
       :config
       (use-package js2-refactor
         :config
         (js2r-add-keybindings-with-prefix "C-c C-r")
         (setq js2-skip-preprocessor-directives t))
       (setq js2-basic-offset 2
             js-indent-level 2
             js2-use-font-lock-faces t)
       (add-hook 'js2-mode-hook (lambda () (flycheck-mode t)))
       (autoload 'json-pretty-print "json-pretty-print" "json-pretty-print" t))

     ;; à tester
     (use-package js-comint
       :disabled
       :config  (defun inferior-js-mode-hook-setup ()
                  (add-hook 'comint-output-filter-functions 'js-comint-process-output))
       (add-hook 'inferior-js-mode-hook 'inferior-js-mode-hook-setup t)
       (add-hook 'js2-mode-hook
                 (lambda ()
                   (local-set-key (kbd "C-x C-e") 'js-send-last-sexp)
                   (local-set-key (kbd "C-M-x") 'js-send-last-sexp-and-go)
                   (local-set-key (kbd "C-c b") 'js-send-buffer)
                   (local-set-key (kbd "C-c C-b") 'js-send-buffer-and-go)
                   (local-set-key (kbd "C-c l") 'js-load-file-and-go))))
   #+END_SRC

** Web
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode ;; HTML, XML, JSP (using web-mode)
       :config
       (setq web-mode-markup-indent-offset 2
             web-mode-code-indent-offset 2
             web-mode-enable-auto-indentation t
             web-mode-enable-auto-quoting t
             web-mode-engines-alist '(("php" . "\\.phtml\\'")
                                      ("blade" . "\\.blade\\.")))
       :mode ("\\.phtml\\'"
              "\\.tpl\\.php\\'"
              "\\.[agj]sp\\'"
              "\\.as[cp]x\\'"
              "\\.erb\\'"
              "\\.js\\'"
              "\\.jsx\\'"
              "\\.json\\'"
              "\\.mustache\\'"
              "\\.djhtml\\'"
              "\\.rhtml\\'"
              "\\.htm\\'"
              "\\.html\\'"
              "\\.tag\\'"
              "\\.tsx\\'"
              "\\.xml\\'"
              "\\.xsd\\'"
              "\\.wsdl\\'"))

     (defun mu-xml-format ()
       "Format an XML buffer with `xmllint'."
       (interactive)
       (shell-command-on-region (point-min) (point-max)
                                "xmllint -format -"
                                (current-buffer) t
                                "*Xmllint Error Buffer*" t))
     (use-package web-beautify
       :disabled
       :bind-keymap (
                     ;; :map js2-mode-map ("C-c b" . web-beautify-js)
                     ;; Or if you're using 'js-mode' (a.k.a 'javascript-mode')
                     :map js-mode-map ("C-c b" . web-beautify-js)
                     :map json-mode-map ("C-c b" . web-beautify-js)
                     :map html-mode-map ("C-c b" . web-beautify-html)
                     :map web-mode-map ("C-c b" . web-beautify-html)
                     :map css-mode-map ("C-c b" . web-beautify-css)))
   #+END_SRC

** Typescript
   #+BEGIN_SRC emacs-lisp
     (use-package tide
       :chords (:map tide-mode-map
                     ("+-" . bury-buffer))
       :bind (:map tide-mode-map
                   ("C-c k" . bury-buffer)
                   ("C-." . tide-jump-to-definition)
                   ("C-," . tide-jump-back)
                   ("C-c C-c" . hydra-tide/body))
       :hook
       ;; formats the buffer before saving
       (before-save . tide-format-before-save)
       (typescript-mode . setup-tide-mode)
       (typescript-mode . rainbow-blocks-mode)
       (js2-mode . setup-tide-mode)
       :config
       (defun setup-tide-mode ()
         (interactive)
         (tide-setup)
         (flycheck-mode +1)
         (setq flycheck-check-syntax-automatically '(save mode-enabled))
         ;; flycheck-typescript-tslint-executable "tslint"
         ;; (eldoc-mode +1)
         (company-mode +1))

       (setq company-tooltip-align-annotations t  ;; aligns annotation to the right hand side
             typescript-indent-level 2
             ;; format options
             tide-format-options '(
                                   :insertSpaceAfterFunctionKeywordForAnonymousFunctions t
                                   :placeOpenBraceOnNewLineForFunctions nil))

       ;; (setq tide-tsserver-process-environment '("TSS_LOG=-level verbose -file ~/projets/tss.log"))

       (defhydra hydra-tide(:color blue)
         "tide"
         ("e" tide-project-errors "errors")
         ("f" tide-format "format")
         ("g" tide-references "references")
         ("r" tide-rename-symbol "rename")
         ("s" tide-restart-server "restart server")
         ("q" nil "cancel")))

     (use-package typescript-mode
       :disabled
       :mode ("\\.ts\\'"
              "\\.json\\'"))

     (use-package sass-mode
       :mode ("\\.sass$" . sass-mode))
   #+END_SRC

** Python
   #+BEGIN_SRC emacs-lisp
     (use-package python
       :bind (:map python-mode-map
                   ("M-g M-p" . elpy-flymake-previous-error)
                   ("M-g M-n" . elpy-flymake-next-error)
                   ("C-x C-e" . python-shell-send-defun))
       :hook (python-mode . (lambda ()
                              (progn
                                (elpy-enable)
                                (elpy-mode)
                                (flycheck-mode))))
       :config
       (setq python-indent-offset 2
             tab-always-indent t)
       (use-package jedi
         :config (setq jedi:complete-on-dot t))
       (use-package elpy
         :config (setq elpy-rpc-backend "jedi"))) ;; fire up jedi in python env
   #+END_SRC

** Yaml
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :config (add-to-list 'auto-mode-alist '(".yml$" . yaml-mode)))
   #+END_SRC

** Crontab
   #+BEGIN_SRC emacs-lisp
     (use-package crontab-mode
       :ensure nil
       :mode ("crontab$" . crontab-mode))
   #+END_SRC

** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode)
   #+END_SRC

** Gradle
   #+BEGIN_SRC emacs-lisp
     (use-package gradle-mode
       :mode ("\\.gradle\\'" . gradle-mode))
   #+END_SRC
* Web browsing
  I use eww to surf the web in emacs, for simple pages mostly:
  #+BEGIN_SRC emacs-lisp
    (use-package eww
      :config
      (setq browse-url-generic-program "firefox"
            browse-url-browser-function 'eww-browse-url ;; set default browser to eww, then ‘&’ to open page firefox
            shr-external-browser 'browse-url-firefox
            shr-width 100 ;; keep sane layout
            shr-use-fonts nil ;; no fancy fonts in text mode
            gnus-button-url 'browse-url-generic))
  #+END_SRC
* Quick access
  #+BEGIN_SRC emacs-lisp
    (defhydra hydra-minor-modes(:color blue :hint nil)
      "
      ^Minor mode^           ^Toggle
      ^──────────^───────────^──────^───────────────────
      _q_  quit              _(_ smartparens %`smartparens-mode
      ^ ^                    _)_ smartparens strict %`smartparens-strict-mode
      ^ ^                    _g_ god %`god-local-mode
      ^ ^                    _h_ Idle HL %(when (boundp 'idle-highlight-mode) (idle-highlight-mode))
      ^ ^                    _H_ Highlight-line %`highlight-line-mode
      ^ ^                    _i_ ido %`ido-mode
      ^ ^                    _I_ indent-guide %(when (boundp 'highlight-indent-guides-mode) (highlight-indent-guides-mode))
      ^ ^                    _l_ line number
      ^ ^                    _m_ minimap
      ^ ^                    _n_ sidebar
      ^ ^                    _o_ overwrite-mode %`overwrite-mode
      ^ ^                    _p_ prettify symbols
      ^ ^                    _s_ sublimity %`sublimity-mode
      ^ ^                    _v_ visual-line %`visual-line-mode
      ^ ^                    _V_ volatile-highlight %`volatile-highlights-mode
      ^ ^                    _w_ whitespace %`global-whitespace-mode
      ^ ^                    _x_ winnow-mode %`winnow-mode
      "

      ("(" smartparens-global-mode)
      (")" smartparens-global-strict-mode)
      ("g" toggle-god-mode)
      ("h" idle-highlight-mode)
      ("H" hl-line-mode)
      ("i" ido-mode)
      ("I" highlight-indent-guides-mode)
      ("l" linum-mode)
      ("m" minimap-mode)
      ("n" dired-sidebar-toggle-sidebar)
      ("o" overwrite-mode)
      ("p" prettify-symbols-mode)
      ("s" sublimity-mode)
      ("v" visual-line-mode)
      ("V" volatile-highlights-mode)
      ("w" whitespace-mode)
      ("x" winnow-mode)
      ("q" nil "cancel"))
    (global-set-key (kbd "C-c m") 'hydra-minor-modes/body)

    (defhydra hydra-major-modes(:color blue :hint nil)
      "
      ^Major mode^           ^Toggle
      ^──────────^───────────^──────^──────
      _q_  quit              _j_ js2-mode
      ^ ^                    _l_ lisp-mode
      ^ ^                    _o_ org-mode
      ^ ^                    _t_ text-mode
      ^ ^                    _w_ web-mode
      "

      ("j" js2-mode)
      ("l" lisp-mode)
      ("o" org-mode)
      ("t" text-mode)
      ("w" web-mode)
      ("q" nil "cancel"))
    (global-set-key (kbd "C-c M") 'hydra-major-modes/body)

    (defhydra hydra-widgets (:color teal :hint nil)
      "
      ^Built-in^      ^Widget^                  ^Find files^         ^Action^               ^Toggle
      ^────────^──────^──────^──────────────────^──────────^─────────^──────^───────────────^──────^───────────────
      _e_ eshell      _m_ mu4e                  _d_ diary            _C_ flycheck buffer    _(_ smartparens %`smartparens-mode
      _G_ gnus        _a_ avandu RSS            _D_ remote diary     ^ ^                    _f_ ido %`ido-mode
      _p_ packages    _A_ lobsters              _i_ init file        _è_ spelling hydra     _g_ god %`god-local-mode
      _t_ shell-pop   _b_ eww-browser           _r_ rest-client      _é_ char-menu          _h_ Idle HL %(when (boundp 'idle-highlight-mode) (idle-highlight-mode))
      _$_ shell       _B_ code browser          ^ ^                  ^ ^                    _H_ Highlight-line %`highlight-line-mode
      _%_ ansi-term   _c_ calendar              ^ ^                  ^ ^                    _I_ indent-guide %(when (boundp 'highlight-indent-guides-mode) (highlight-indent-guides-mode))
      _w_ web browser _E_ elfeed RSS            ^ ^                  ^ ^                    _j_ js2-mode
      ^ ^             _J_ jenkins               ^ ^                  ^ ^                    _l_ line number
      ^ ^             _M_ spotify               ^ ^                  ^ ^                    _n_ sidebar
      ^ ^             _Q_ quick-calc            ^ ^                  ^ ^                    _o_ org-mode
      ^ ^             _T_ pomodoro (tomatinho)  ^ ^                  ^ ^                    _P_ prettify symbols
      ^ ^             _z_ ztree-diff            ^ ^                  ^ ^                    _s_ sublimity %`sublimity-mode
      ^ ^             ^ ^                       ^ ^                  ^ ^                    _v_ visual-line %`visual-line-mode
      ^ ^             ^ ^                       ^ ^                  ^ ^                    _V_ volatile-highlight %`volatile-highlights-mode
      ^ ^             ^ ^                       ^ ^                  ^ ^                    _W_ web-mode
      ^ ^             ^ ^                       ^ ^                  ^ ^                    _x_ winnow-mode %`winnow-mode
      "
      ;; Built-in
      ("e" eshell)
      ("G" gnus)
      ("p" paradox-list-packages)
      ("t" shell-pop)
      ("$" shell)
      ("%" crux-visit-term-buffer)
      ("w" eww)

      ;; Widget
      ("m" mu4e)
      ("a" avandu-overview)
      ("a" avandu-overview)
      ("A" helm-lobsters)
      ("b" eww)
      ("B" ecb-activate)
      ("c" open-calendar)
      ("E" elfeed)
      ("J" butler-status)
      ("M" helm-spotify-plus)
      ("Q" quick-calc)
      ("T" tomatinho)
      ("z" ztree-diff)

      ;; Find files
      ("d" ale/find-diary-file)
      ("D" ale/find-remote-diary-file)
      ("i" ale/find-init-file)
      ("r" ale/find-rest-client-file)

      ;; Action
      ("C" flyspell-buffer)
      ;;
      ("è" hydra-spell/body)
      ("é" char-menu)

      ;; Toggle
      ("(" smartparens-global-mode)
      ("f" ido-mode)
      ("g" toggle-god-mode)
      ("h" idle-highlight-mode)
      ("H" hl-line-mode)
      ("I" highlight-indent-guides-mode)
      ("j" js2-mode)
      ("l" linum-mode)
      ("n" dired-sidebar-toggle-sidebar)
      ("o" org-mode)
      ("P" prettify-symbols-mode)
      ("s" sublimity-mode)
      ;; ("S" spray-mode)
      ("v" visual-line-mode)
      ("V" volatile-highlights-mode)
      ("W" web-mode)
      ("x" winnow-mode)
      ;; ("W" wttrin)
      ;; ("y" play-youtube-video)
      ;; ("Y" w3m-play-youtube-video)
      ("q" nil "cancel"))
    (key-chord-define-global (kbd "bj") 'hydra-widgets/body)
  #+END_SRC

* Special characters, spelling, i18n
** Special characters
   #+BEGIN_SRC emacs-lisp
     (use-package char-menu
       :bind (("<f7>" . char-menu))
       :config
       (setq char-menu '(("Typography" "•" "©" "†" "‡" "°" "·" "§" "№" "★")
                         ("Math"       "≈" "≡" "∞" "√" "∀" "∃")
                         ("cyrillic"   "а" "б" "в" "г" "д" "е" "ж" "ѕ" "з" "и" "і" "к" "л" "м" "н" "о" "п" "р" "с" "т" "ꙋ" "ф" "х" "ѡ" "ц" "ч" "ш" "щ" "ъ" "ы" "ь" "ѣ" "ю" "ꙗ" "ѥ" "ѧ" "ѫ" "ѩ" "ѭ" "ѯ" "ѱ" "ѳ" "ѵ")
                         ("cyril. maj" "А" "Б" "В" "Г" "Д" "Е" "Ж" "Ѕ" "З" "И" "І" "К" "Л" "М" "Н" "О" "П" "Р" "С" "Т" "Ꙋ" "Ф" "Х" "Ѡ" "Ц" "Ч" "Ш" "Щ" "Ъ" "Ы" "Ь" "Ѣ" "Ю" "Ꙗ" "Ѥ" "Ѧ" "Ѫ" "Ѩ" "Ѭ" "Ѯ" "Ѱ" "Ѳ" "Ѵ")
                         ("arabic"     "ﺎ" "ﺍ" "ﺐ" "ﺒ" "ﺑ" "ﺏ" "ﺖ" "ﺘ" "ﺗ" "ﺕ" "ﺚ" "ﺜ" "ﺛ" "ﺙ" "ﺞ" "ﺠ" "ﺟ" "ﺝ" "ﺢ" "ﺤ" "ﺣ" "ﺡ" "ﺦ" "ﺨ" "ﺧ" "ﺥ" "ﺪ" "ﺩ" "ﺬ" "ﺫ" "ﺮ" "ﺭ" "ﺰ" "ﺯ" "ﺲ" "ﺴ" "ﺳ" "ﺱ" "ﺶ" "ﺸ" "ﺷ" "ﺵ" "ﺺ" "ﺼ" "ﺻ" "ﺹ" "ﺾ" "ﻀ" "ﺿ" "ﺽ" "ﻂ" "ﻄ" "ﻃ" "ﻁ" "ﻆ" "ﻈ" "ﻇ" "ﻅ" "ﻊ" "ﻌ" "ﻋ" "ﻉ" "ﻎ" "ﻐ" "ﻏ" "ﻍ" "ﻒ" "ﻔ" "ﻓ" "ﻑ" "ﻖ" "ﻘ" "ﻗ" "ﻕ" "ﻚ" "ﻜ" "ﻛ" "ﻙ" "ﻞ" "ﻠ" "ﻟ" "ﻝ" "ﻢ" "ﻤ" "ﻣ" "ﻡ" "ﻦ" "ﻨ" "ﻧ" "ﻥ" "ﻪ" "ﻬ" "ﻫ" "ﻩ" "ﻮ" "ﻭ" "ﻲ" "ﻴ" "ﻳ" "ﻱ")
                         ("Greek"      "α" "β" "Y" "δ" "ε" "ζ" "η" "θ" "ι" "κ" "λ" "μ" "ν" "ξ" "ο" "π" "ρ" "σ" "τ" "υ" "φ" "χ" "ψ" "ω")
                         ("Greek Maj"  "Α" "Β" "Y" "Δ" "Ε" "Ζ" "Η" "Θ" "Ι" "Κ" "Λ" "Μ" "Ν" "Ξ" "Ο" "Π" "Ρ" "Σ" "Τ" "Υ" "Φ" "Χ" "Ψ" "Ω")
                         ("Smileys"    "☺" "☹")
                         ("Arrows"     "←" "→" "↑" "↓" "↔" "↕" "⇔" "⇐" "⇒"))))
     (global-set-key (kbd "<f6>") 'hydra-arabic/body)
   #+END_SRC

** Arabic
   #+BEGIN_SRC emacs-lisp
     (defhydra hydra-arabic (:color pink)
       "type in arabic"
       ("a" (insert-char 1575) "ا") ;; ARABIC LETTER ALEF
       ("b" (insert-char 1576) "ب") ;; ARABIC LETTER BEH
       ("t" (insert-char 1578) "ت") ;; ARABIC LETTER TEH
       ("þ" (insert-char 1579) "ث") ;; ARABIC LETTER THEH
       ("j" (insert-char 1580) "ج") ;; ARABIC LETTER JEEM
       ("H" (insert-char 1581) "ح") ;; ARABIC LETTER HAH
       ("†" (insert-char 1582) "خ") ;; ARABIC LETTER KHAH
       ("d" (insert-char 1583) "د") ;; ARABIC LETTER DAL
       ("ð" (insert-char 1584) "ذ") ;; ARABIC LETTER THAL
       ("r" (insert-char 1585) "ر") ;; ARABIC LETTER REH
       ("z" (insert-char 1586) "ز") ;; ARABIC LETTER ZAIN
       ("s" (insert-char 1587) "س") ;; ARABIC LETTER SEEN
       ("ß" (insert-char 1588) "ش") ;; ARABIC LETTER SHEEN
       ("S" (insert-char 1589) "ص") ;; ARABIC LETTER SAD
       ("D" (insert-char 1590) "ض") ;; ARABIC LETTER DAD
       ("T" (insert-char 1591) "ط") ;; ARABIC LETTER TAH
       ("Z" (insert-char 1592) "ظ") ;; ARABIC LETTER ZAH
       ("g" (insert-char 1593) "ع") ;; ARABIC LETTER AIN
       ("®" (insert-char 1594) "غ") ;; ARABIC LETTER GHAIN
       ("f" (insert-char 1601) "ف") ;; ARABIC LETTER FEH
       ("Q" (insert-char 1602) "ق") ;; ARABIC LETTER QAF
       ("k" (insert-char 1603) "ك") ;; ARABIC LETTER KAF
       ("l" (insert-char 1604) "ل") ;; ARABIC LETTER LAM
       ("m" (insert-char 1605) "م") ;; ARABIC LETTER MEEM
       ("n" (insert-char 1606) "ن") ;; ARABIC LETTER NOON
       ("h" (insert-char 1607) "ه") ;; ARABIC LETTER HEH
       ("w" (insert-char 1608) "و") ;; ARABIC LETTER WAW
       ("y" (insert-char 1610) "ي") ;; ARABIC LETTER YEH
       ("'" (insert-char 1569) "ء") ;; ARABIC LETTER HAMZA
       ("q" nil "cancel" :color blue))
   #+END_SRC

** Spell checking
   #+BEGIN_SRC emacs-lisp
     (defhydra hydra-spell (:color teal)
       "spelling"
       ("t" endless/ispell-word-then-abbrev "corr. & add")
       ("f" flyspell-mode "flyspell")
       ("c" flyspell-buffer "flycheck buffer")
       ("F" flyspell-buffer "flycheck buffer")
       ("d" ispell-change-dictionary "change dictionary")
       ("w" define-word-at-point "word definition")
       ("q" nil "cancel"))
     (global-set-key (kbd "C-è") 'hydra-spell/body)
   #+END_SRC
** Grammalecte
   #+BEGIN_SRC emacs-lisp
     (use-package grammalecte
       :disabled
       :ensure nil
       :load-path "../projets/yet-an-other-flycheck-grammalecte-fork/")
   #+END_SRC

* Environment
  #+BEGIN_SRC emacs-lisp
    (load-file (expand-file-name "env.el" user-emacs-directory))
  #+END_SRC

* Mode-line
  After several attempts to switch to fancier packages such as [[https://github.com/milkypostman/powerline][powerline]], [[https://github.com/TheBB/spaceline][spaceline]] or [[https://github.com/dbordak/telephone-line][telephone-line]], I went back to [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]], which loads faster and fulfils most of my needs.

  #+BEGIN_SRC emacs-lisp
    (use-package modeline-posn
      :ensure nil
      :demand
      :load-path "elisp/"
      :config (load-library "modeline-posn.el"))

    (use-package sml-modeline)

    (use-package smart-mode-line
      :config
      ;; for issues with theme loading
      (size-indication-mode)
      (setq sml/theme 'dark
            sml/replacer-regexp-list '(("^~/projets/" ":p:")
                                       ("^~/\\.emacs\\.d/elpa/" ":ELPA:")
                                       ("^~/\\.emacs\\.d/" ":ED:")
                                       ("^/sudo:.*:" ":SU:")
                                       ("^~/Terminalcity/" ":T:")))
      (sml/setup))
  #+END_SRC

* Session saving & backups
  #+BEGIN_SRC emacs-lisp
    ;; auto-save file-visiting buffers
    (use-package super-save
      :disabled
      :config
      (super-save-mode +1)
      (dim-minor-name 'super-save-mode (concat " " (icons-in-terminal 'linea_basic_floppydisk)))
      (setq super-save-auto-save-when-idle t
            auto-save-default nil))

    ;; Save a list of recent files visited.
    (use-package desktop
      :defer t
      :config
      (setq recentf-max-saved-items 100  ;; just 20 is too recent
            vc-make-backup-files t ;; make backups of files, even when they're in version control
            delete-by-moving-to-trash t ;; move files to trash when deleting
            desktop-save t
            savehist-additional-variables '(register-alist)
            ;; desktop-base-lock-name      "lock"
            ;; desktop-dirname             user-emacs-directory
            ;; desktop-path                (list desktop-dirname)
            ;; desktop-files-not-to-save   "^$" ;reload tramp paths
            ;; desktop-load-locked-desktop t
            ;; (add-to-list 'desktop-modes-not-to-save 'dired-mode)
            )
      (recentf-mode 1)
      (desktop-save-mode 1)
      (savehist-mode 1)
      (add-hook 'desktop-after-read-hook (lambda () (set-cursor-color "yellow")))
      (desktop-read))
  #+END_SRC

* Server mode
  #+BEGIN_SRC emacs-lisp
    (use-package edit-server
      :if (and
           (window-system)
           (or
            (not (fboundp 'server-running-p))
            (not (server-running-p))))
      :bind ("M-#" . server-edit) ;; send back to server, quicker than C-x #
      :hook
      (after-init-hook . server-start)
      (after-init-hook . edit-server-start))
  #+END_SRC

* Other
** Pomodoro
   #+BEGIN_SRC emacs-lisp
     (use-package tomatinho :disabled)
   #+END_SRC

** Restclient
   #+BEGIN_SRC emacs-lisp
     ;; REST client
     (use-package restclient-helm
       :ensure restclient
       :mode ("restclient" . restclient-mode)
       :bind
       (:map restclient-mode-map
             ("C-c n w" . widen)))

     (use-package ob-restclient)
   #+END_SRC

** Spritz
   [[http://spritzinc.com/][spritz]] is a reading technique. [[https://github.com/emacsmirror/spray][Spray-mode]] implements it for any emacs buffer.
   #+BEGIN_SRC emacs-lisp
     ;; spray mode (spritz)
     (use-package spray
       :disabled
       :bind (:map spray-mode-map
                   ("-" . spray-slower)
                   ("+" . spray-faster)
                   ("<SPC>" . spray-start/stop)
                   ("b" . spray-backward-word)
                   ("p" . spray-backward-word)
                   ("f" . spray-forward-word)
                   ("n" . spray-forward-word)))
   #+END_SRC

** epub
   It now seems possible to read epub documents (ebooks) from within emacs:
   #+BEGIN_SRC emacs-lisp
     (use-package nov
       :disabled
       :config
       ((add-to-list 'auto-mode-alist '(".epub$" . nov-mode))))
   #+END_SRC
** Text filling
   Lorem ipsum text filler:
   #+BEGIN_SRC emacs-lisp
     (use-package lorem-ipsum :defer t)
   #+END_SRC

** Music
   #+BEGIN_SRC emacs-lisp
     (use-package helm-spotify-plus :disabled)
   #+END_SRC

** Youtube
   #+BEGIN_SRC emacs-lisp
     (defun play-youtube-video (url)
       (interactive "sURL: ")
       (shell-command
        (concat "youtube-dl  -o - " url " | vlc -")))

     (defun w3m-play-youtube-video ()
       (interactive)
       (play-youtube-video
        (w3m-print-this-url (point))))
   #+END_SRC

** Games
*** Typing
    #+BEGIN_SRC emacs-lisp
      (use-package speed-type :disabled)
      (use-package typit :disabled)
      (use-package typing :disabled)
    #+END_SRC

*** Other
    #+BEGIN_SRC emacs-lisp
      (use-package 2048-game :disabled)
      (use-package vimgolf :disabled)
      (use-package slime-volleyball :disabled)
    #+END_SRC
** News
*** RSS feeds
**** Avandu (gateway to tiny tiny RSS):
     #+BEGIN_SRC emacs-lisp
        (use-package avandu
          :defer t
          :config (setq avandu-tt-rss-api-url my-private-personal-tt-rss-api-url
                        avandu-user my-private-personal-tt-rss-username
                        avandu-password my-private-personal-tt-rss-password)
          :bind (:map avandu-article-mode-map
                      ("p" . previous-line)
                      ("n" . next-line)
                      ("l" . recenter-top-bottom)
                      :map avandu-overview-map
                      ("<tab>" . avandu-next-feed)
                      ("<backtab>" . avandu-previous-feed)
                      ("l" . recenter-top-bottom)
                      ("v" . scroll-up-command)))
     #+END_SRC
**** Elfeed
     #+BEGIN_SRC emacs-lisp
       (use-package elfeed
         :disabled)
     #+END_SRC
*** Stories
    #+BEGIN_SRC emacs-lisp
      (use-package helm-lobsters)
    #+END_SRC
* Epilogue
  My init file (emacs.org) should always be open.
  #+BEGIN_SRC emacs-lisp
    (ale/find-init-file)
  #+END_SRC
* Useful links
** blogs
   - http://sachachua.com/blog/
** vlogs
   - http://emacsrocks.com/
   - https://mickael.kerjean.me/2017/03/18/emacs-tutorial-series-episode-0/
   - https://cestlaz.github.io/stories/emacs/
** configs
   - https://github.com/purcell/emacs.d
   - https://github.com/dakra/dmacs/blob/master/init.org
   - https://github.com/angrybacon/dotemacs
   - https://github.com/jwiegley/dot-emacs
** other
   - https://github.com/sebastiencs
